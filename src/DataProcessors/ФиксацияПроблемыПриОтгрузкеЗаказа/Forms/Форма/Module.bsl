#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ДокументыРасхожденияНеПроведены(Отказ);
	Если Отказ Тогда
		ПоказатьПредупреждение(,"Перейдите в каждый документ для фиксации расхождения и проведите его");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВыделенныеХарактеристикиВОрдере = ВернутьВыделенныеХарактеристики(Параметры.Ордер,
		Параметры.ПозицииВРасходномОрдере, Параметры.Заказ);
	ЗаполнитьСписокТоваров(Параметры.Заказ, ВыделенныеХарактеристикиВОрдере);
	Объект.Заказ = Параметры.Заказ;
	Объект.Ордер = Параметры.Ордер;

КонецПроцедуры
#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы //<ИмяТаблицыФормы>

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НедоступноДляОтгрузки(Команда)

	Перем ВводимоеЧисло;
	ОбратныйВызов = Новый ОписаниеОповещения("ОбратныйВызов", ЭтотОбъект,
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковок);
	ПоказатьВводЧисла(ОбратныйВызов, ВводимоеЧисло, "Введите количество, недоступное для отгрузки", 15, 3);

КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьПроблему(Команда)

	ОтредактироватьЗаказКлиентаИВыгрузитьвСRM();
	ОбновитьФорму();
	СоздатьДокументыОтраженияПоТЧ();	
	ЗаполнитьТаблицуДокументовОтражения();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ДокументыРасхожденияНеПроведены(Отказ)
	Для Каждого Стр из Объект.ДокументыОтражения Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОтражения, "Проведен") = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДокументовОтражения()
	 Элементы.ПроблемныеТовары.Видимость = Ложь;
	 Элементы.Товары.Видимость = Ложь;
	 Элементы.ДокументыОтражения.Видимость = Истина;
	 ТаблЗн = Объект.ПроблемныеТовары.Выгрузить();
	 ТаблЗн.Свернуть("ДокументРасхождения");
	 Для Каждого Стр из ТаблЗн Цикл
	 	НоваяСтрТЧ = Объект.ДокументыОтражения.Добавить();
	 	НоваяСтрТЧ.ДокументОтражения = Стр.ДокументРасхождения;
	 КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокТоваров(Знач Заказ, ВыделенныеХарактеристикиВОрдере)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗаказКлиентаТовары.НомерСтроки,
				   |	ЗаказКлиентаТовары.Ссылка,
				   |	ЗаказКлиентаТовары.ВРезерве,
				   |	ЗаказКлиентаТовары.ВЦехеПокраски,
				   |	ЗаказКлиентаТовары.ВариантОбеспечения,
				   |	ЗаказКлиентаТовары.ВидЦены,
				   |	ЗаказКлиентаТовары.ДатаОтгрузки,
				   |	ЗаказКлиентаТовары.Заказан,
				   |	ЗаказКлиентаТовары.ЗакупочнаяЦена,
				   |	ЗаказКлиентаТовары.Заправка,
				   |	ЗаказКлиентаТовары.Количество,
				   |	ЗаказКлиентаТовары.КоличествоУпаковок,
				   |	ЗаказКлиентаТовары.КомментарийCRM,
				   |	ЗаказКлиентаТовары.КомментарийКЗакупке,
				   |	ЗаказКлиентаТовары.Номенклатура,
				   |	ЗаказКлиентаТовары.Обособленно,
				   |	ЗаказКлиентаТовары.Отменено,
				   |	ЗаказКлиентаТовары.ПричинаОтмены,
				   |	ЗаказКлиентаТовары.СтатусЗаправки,
				   |	ЗаказКлиентаТовары.СтатусПокраски,
				   |	ЗаказКлиентаТовары.СтатусРекламации,
				   |	ЗаказКлиентаТовары.Характеристика,
				   |	ЗаказКлиентаТовары.Цвет,
				   |	ЗаказКлиентаТовары.Цена
				   |ИЗ
				   |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
				   |ГДЕ
				   |	ЗаказКлиентаТовары.Ссылка = &Ссылка
				   |	И ЗаказКлиентаТовары.Характеристика В (&Характеристики)
				   |	И ЗаказКлиентаТовары.Отменено = ЛОЖЬ
				   |	И ЗаказКлиентаТовары.ВариантОбеспечения = &ВариантОбеспечения";
	Запрос.УстановитьПараметр("Характеристики", ВыделенныеХарактеристикиВОрдере);
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Запрос.УстановитьПараметр("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	РезультатЗапросаВыборка = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапросаВыборка.Следующий() Цикл
		НоваяСтрТЧ = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрТЧ, РезультатЗапросаВыборка);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьВыделенныеХарактеристики(Знач Ордер, Знач Позиции, Знач Распоряжение)
	Инд = 0;
	Для Каждого Стр Из Позиции Цикл
		Позиции[инд] = Стр + 1;
		инд = инд + 1;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика
				   |ИЗ
				   |	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
				   |ГДЕ
				   |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки В (&Позиции)
				   |	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
				   |	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ордер";
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.УстановитьПараметр("Ордер", Ордер);
	РезультатЗапросаВыборка = Запрос.Выполнить().Выбрать();
	МассХарактеристик = Новый Массив;
	Пока РезультатЗапросаВыборка.Следующий() Цикл
		МассХарактеристик.Добавить(РезультатЗапросаВыборка.Характеристика);
	КонецЦикла;
	Возврат МассХарактеристик;

КонецФункции

&НаКлиенте
Процедура ОбратныйВызов(Число, ОбщееКоличествоПозиции) Экспорт

	Если Число = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ничего не введено!");
	ИначеЕсли Число > ОбщееКоличествоПозиции Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Введено количество больше, чем есть в позиции");
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВводВидаОтражения", ЭтотОбъект, Число);
		ОткрытьФорму("Перечисление.ВариантОтраженияПроблемыПриОтгрузке.ФормаВыбора", , , , , , ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводВидаОтражения(РезультатВыбора, КолВо) Экспорт
	Перем ВводКомментария;
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ОбратныйВызовСтроки = Новый ОписаниеОповещения("ОбратныйВызовПослеВводаКомментария", ЭтотОбъект,
			Новый Структура("Количество,ВариантОтражения", КолВо, РезультатВыбора));
		ПоказатьВводСтроки(ОбратныйВызовСтроки, ВводКомментария, "Введите комментарий к отражаемой ситуации");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ничего не выбрано");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбратныйВызовПослеВводаКомментария(ВведенныйКомментарий, ДопПараметры) Экспорт
	НоваяСтрТЧ = Объект.ПроблемныеТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрТЧ, Элементы.Товары.ТекущиеДанные);
	НоваяСтрТЧ.КоличествоНедоступноеКОтгрузке = ДопПараметры.Количество;
	НоваяСТРТЧ.ВариантОтраженияВУчете = ДопПараметры.ВариантОтражения;
	НоваяСТРТЧ.КомментарийCRM = ?(ВведенныйКомментарий = Неопределено, Элементы.Товары.ТекущиеДанные.КомментарийCRM,
		ВведенныйКомментарий);
	Элементы.Товары.ТекущиеДанные.КоличествоУпаковок = Элементы.Товары.ТекущиеДанные.КоличествоУпаковок
		- ДопПараметры.Количество;
КонецПроцедуры

&НаСервере
Процедура ОтредактироватьЗаказКлиентаИВыгрузитьвСRM()
	ЗаказКлиента = Объект.Заказ.ПолучитьОбъект();
	ТЧТовары = ЗаказКлиента.Товары;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
//	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	КэшированныеЗначения = Неопределено;
	Для Каждого Стр Из Объект.ПроблемныеТовары Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Стр.Номенклатура);
		Отбор.Вставить("Характеристика", Стр.Характеристика);
		Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
		Отбор.Вставить("КоличествоУпаковок", Стр.КоличествоУпаковок);
		Отбор.Вставить("Заправка", Стр.Заправка);
		Отбор.Вставить("Цвет", Стр.Цвет);
		Отбор.Вставить("Заказан", Стр.Заказан);
		НайденныеСтрокиВЗаказе = ТЧТовары.НайтиСтроки(Отбор);	
			ТекущаяСтрока = НайденныеСтрокиВЗаказе[0];
			Если Стр.КоличествоНедоступноеКОтгрузке = Стр.КоличествоУпаковок Тогда
				ТекущаяСтрока.КомментарийCRM = Стр.КомментарийCRM;
				ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				ТекущаяСтрока.ВРезерве = Ложь;
			Иначе
				НоваяСтрока = ТЧТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.КоличествоУпаковок = Стр.КоличествоНедоступноеКОтгрузке;
				НоваяСтрока.Количество = Стр.КоличествоНедоступноеКОтгрузке;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				НоваяСтрока.КомментарийCRM = Стр.КомментарийCRM;
				НоваяСтрока.КодСтроки = 0;
				НоваяСтрока.ВРезерве = Ложь;
				НоваяСтрока.crm_IDпака = 0;
				НоваяСтрока.crm_idПозиции = "";
				НоваяСтрока.crm_Склад = Неопределено;
				
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок -Стр.КоличествоНедоступноеКОтгрузке;
				ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		
	КонецЦикла;
	РаспровестиРасходныйОрдерИЗаданиеНаОтбор(Объект.Заказ,Объект.Ордер);
	Отбор = Новый Структура;
	Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	СтрокиВРезерве = ТЧТовары.НайтиСтроки(Отбор);
	Для Каждого Стр из СтрокиВРезерве Цикл
		Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	КонецЦикла;
	ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
	
	crm_RetailCRMОбщий.ВыгрузитьЗаказВCRM(ЗаказКлиента.Ссылка, , "correction");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РаспровестиРасходныйОрдерИЗаданиеНаОтбор (Знач Заказ, Знач Ордер)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтборРазмещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	|ГДЕ
	|	ОтборРазмещениеТоваров.Распоряжение = &Ордер
	|	И ОтборРазмещениеТоваров.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Ордер",Ордер );
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ОтборТовара = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ОтборТовара.Комментарий = "Отмена процесса отгрузки по причине нехватки товара";
		ОтборТовара.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
	Ордер = Ордер.ПолучитьОбъект();
	Ордер.Комментарий = "Отмена процесса отгрузки по причине нехватки товара";
	Ордер.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	
	Элементы.ЗафиксироватьПроблемы.Видимость = Ложь;
	Элементы.ТоварыНедоступноДляОтгрузки.Видимость = Ложь;
	Элементы.ПроблемныеТоварыСозданДокументРасхождения.Видимость = Истина;
	Элементы.ПроблемныеТоварыДокументРасхождения.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыОтраженияПоТЧ()
	ТЗПроблемныхТоваров = Объект.ПроблемныеТовары.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗТоваров.Номенклатура КАК Номенклатура,
	|	ТЗТоваров.Характеристика КАК Характеристика,
	|	ТЗТоваров.КоличествоНедоступноеКОтгрузке КАК КоличествоНедоступноеКОтгрузке,
	|	ТЗТоваров.ВариантОтраженияВУчете КАК ВариантОтраженияВУчете,
	|	ТЗТоваров.СозданДокументРасхождения КАК СозданДокументРасхождения,
	|	ТЗТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПроблемныеТовары
	|ИЗ
	|	&ТЗТоваров КАК ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроблемныеТовары.НомерСтроки КАК НомерСтроки,
	|	ПроблемныеТовары.Номенклатура КАК Номенклатура,
	|	ПроблемныеТовары.Характеристика КАК Характеристика,
	|	ПроблемныеТовары.КоличествоНедоступноеКОтгрузке КАК КоличествоНедоступноеКОтгрузке,
	|	ПроблемныеТовары.ВариантОтраженияВУчете КАК ВариантОтраженияВУчете
	|ИЗ
	|	ПроблемныеТовары КАК ПроблемныеТовары
	|ГДЕ
	|	ПроблемныеТовары.СозданДокументРасхождения = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоНедоступноеКОтгрузке,
	|	Номенклатура,
	|	НомерСтроки,
	|	Характеристика
	|ИТОГИ
	|ПО
	|	ВариантОтраженияВУчете";	
	Запрос.УстановитьПараметр("ТЗТоваров",ТЗПроблемныхТоваров );
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТЗОтражения = ВернутьТаблицуЗначенийДляОтражения(); 
	СкладВЗаказе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Заказ,"Склад");
	Пока Выборка.Следующий() Цикл
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрТЗ = ТЗОтражения.Добавить();
			НоваяСтрТЗ.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
			НоваяСтрТЗ.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
			НоваяСтрТЗ.КоличествоНедоступноеКОтгрузке = ВыборкаДетальныеЗаписи.КоличествоНедоступноеКОтгрузке;
			НоваяСтрТЗ.НомерСтроки = ВыборкаДетальныеЗаписи.НомерСтроки;
		КонецЦикла;
		СоздатьДокументОтражения(ТЗОтражения,Выборка.ВариантОтраженияВУчете,СкладВЗаказе);
		ПроставитьВТабличнойЧастиСсылкиНаСозданныйДокумент(ТЗОтражения);
		ТЗОтражения.Очистить();
	КонецЦикла;
КонецПроцедуры

// Вернуть таблицу значений для отражения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Вернуть таблицу значений для отражения:
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
// * КоличествоНедоступноеКОтгрузке - Число - 
// * НомерСтроки - Число - 
&НаСервереБезКонтекста
Функция ВернутьТаблицуЗначенийДляОтражения()
	
	ТаблЗН = Новый ТаблицаЗначений;
	ТаблЗН.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура") );
	ТаблЗН.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры") );
	ТаблЗН.Колонки.Добавить("КоличествоНедоступноеКОтгрузке",Новый ОписаниеТипов("Число") );
	ТаблЗН.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число") );
	ТаблЗН.Колонки.Добавить("СсылкаНаДокумент");
	Возврат ТаблЗН;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьДокументОтражения(ТЗОтражения,Знач ВариантОтраженияВУчете,Склад)
		Если ВариантОтраженияВУчете = Перечисления.ВариантОтраженияПроблемыПриОтгрузке.Недостача Тогда
			ДокОтражения = Документы.ОрдерНаОтражениеНедостачТоваров.СоздатьДокумент();
		ИначеЕсли ВариантОтраженияВУчете = Перечисления.ВариантОтраженияПроблемыПриОтгрузке.Пересортица Тогда
			ДокОтражения = Документы.ОрдерНаОтражениеПересортицыТоваров.СоздатьДокумент();
		ИначеЕсли ВариантОтраженияВУчете = Перечисления.ВариантОтраженияПроблемыПриОтгрузке.Порча Тогда	
			ДокОтражения = Документы.ОрдерНаОтражениеПорчиТоваров.СоздатьДокумент();
		КонецЕсли;
		ДокОтражения.Склад = Склад;
		ДокОтражения.Ответственный = Пользователи.ТекущийПользователь();
		ДокОтражения.Дата = ТекущаяДатаСеанса();
		
		Для Каждого Стр из ТЗОтражения Цикл
			
			СтрокаОтражения = ДокОтражения.Товары.Добавить();
			СтрокаОтражения.Номенклатура = Стр.Номенклатура;
			СтрокаОтражения.Характеристика = Стр.Характеристика;
			СтрокаОтражения.Количество = Стр.КоличествоНедоступноеКОтгрузке;
			СтрокаОтражения.КоличествоУпаковок = Стр.КоличествоНедоступноеКОтгрузке;
			
		КонецЦикла;
		
		ДокОтражения.Записать();
		
		Для Каждого Стр из ТЗОтражения Цикл	
			Стр.СсылкаНаДокумент = ДокОтражения.Ссылка;	
		КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ПроставитьВТабличнойЧастиСсылкиНаСозданныйДокумент(ТЗОтражения)
	
	Для Каждого Стр из ТЗОтражения Цикл
		Отбор = Новый Структура("НомерСтроки",Стр.НомерСтроки );
		НайденныеСтроки = Объект.ПроблемныеТовары.НайтиСтроки(Отбор);
		Если НайденныеСтроки <> 0 Тогда
			Для Каждого СтрВТЧ из НайденныеСтроки Цикл
				СтрВТЧ.ДокументРасхождения = Стр.СсылкаНаДокумент;
				СтрВТЧ.СозданДокументРасхождения = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти