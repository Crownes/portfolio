////////////////////////////////////////////////////////////////////////////////
// Модуль документа Взаимозачета, захваченный в расширении после события ОбработкиПроведения:
// - Для выгрузки информации по перенесённому платежу во внешнюю стороннюю систему ;
// - Для изменения суммы платежа в заказах ТЧ кредиторской задолженности во внешней сторонней системе;
// - Есть существенный недостаток, что данный функционал под единоразовую выгрузку и синхронизацию 
////////////////////////////////////////////////////////////////////////////////
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
&После("ОбработкаПроведения")
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	///======================================================================================================================
	// Получаем булево в функции, т.к. взаимозачёт возможно уже пришёл из сторонней системы, тогда не нужно выполнять код ниже
	// Также проверка идёт, чтобы перенос был только в один заказ клиента
	ВзаимоЗачетПриходилВОбмене = ПризнакОбработкиВзаимозачета(Ссылка);
	Если Не Отказ И Проведен И ДебиторскаяЗадолженность.Количество() = 1 И Не ВзаимоЗачетПриходилВОбмене Тогда
		Заказ =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДебиторскаяЗадолженность[0].ОбъектРасчетов, "Объект");
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			///======================================================================================================================
			// Возвращаем идентификаторы заказа, номер заказа, код магазина во внешней системе,
			АйдиЗаказа = ВернутьИдентификатор(Заказ,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "ИД"));
			НомерЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "НомерПоДаннымКлиента");
			КодМагазина = ВернутьИдентификатор(Заказ,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "Site"));
			АйдиВзаимозачета = ВернутьИдентификатор(Ссылка,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "ИДоплатыПеренос"););
			
			Если ПустаяСтрока(АйдиЗаказа) Или ПустаяСтрока(КодМагазина) Тогда
				Возврат;
			КонецЕсли;
			НовыйПеренос = ?(ПустаяСтрока(АйдиВзаимозачета),Истина , Ложь );
			
			///======================================================================================================================
			// Возвращается таблица значений, содержащая только заказы клиента, если основанием аванса являются документы возврата
			// то в функции идёт поиск заказа клиента
			ТЗАвансов = ВернутьТЗАвансовДокумента(Ссылка);
			
			///======================================================================================================================
			// Получение ключей для дальнейших запросов
			КлючCRM		= СокрЛП(crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("КлючCRM"));
			ИмяСервера 	= СокрЛП(crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИмяСервера"));
			
			//======================================================================================================================
			// Компоновка данных для вызова метода сторонней библиотеки отправки запроса 
			Платеж = Новый Соответствие;
			Платеж.Вставить("amount", Формат(СуммаДокумента, "ЧРД=.; ЧГ=0"));
			Если НовыйПеренос Тогда
				ПлатежЗ = Новый Соответствие;
				ПлатежЗ.Вставить("id", АйдиЗаказа);
				Платеж.Вставить("order", ПлатежЗ);
			///======================================================================================================================
			// Тип платежа в сторонней системе, т.к. в ней нет объектной модели для операций переноса ДС
			// И по этому же типу обратно - 1С понимает, что пришла не оплата, а перенос оплаты
				Платеж.Вставить("type", "perenos-ds");
			КонецЕсли;

			Платеж.Вставить("status", "paid");
			КомментарийПлатежа = "Аванс клиента - 1С";
			///======================================================================================================================
			// Комментарий для пользователей, что откуда пришло - поможет и в тестировании и при возникновении ошибок
			Для Каждого Стр Из ТЗАвансов Цикл
				КомментарийПлатежа = КомментарийПлатежа + Символы.ПС + "Перенос из " + Стр.НомерЗаказа + "- "
					+ XMLСтрока(Стр.Сумма) + " руб.";
			КонецЦикла;
			Платеж.Вставить("comment", КомментарийПлатежа);
			Перемен = Новый Соответствие;
			перемен.Вставить("payment", crm_RetailCRMОбщий.JsonTest(Платеж, Новый ЗаписьJSON));
			перемен.Вставить("apiKey", КлючCRM);
			перемен.Вставить("site", КодМагазина);
			///======================================================================================================================
			// В данном исполнении перенос всегда будет новый, но это заготовка под модификацию скрипта
			Если НовыйПеренос Тогда
				Ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/create", перемен);
			Иначе
				Ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/" + XMLСтрока(
					АйдиВзаимозачета) + "/edit", перемен);
			КонецЕсли;
			
			Если Найти(Ответ, "success"":true") = 0 Тогда
				Отказ = Истина;
			Иначе
				ЧтениеОтвета = Новый ЧтениеJSON;
				ЧтениеОтвета.УстановитьСтроку(Ответ);
				СтруктОтвета = ПрочитатьJSON(ЧтениеОтвета, Ложь);
			///======================================================================================================================
			// Записали идентификатор сторонней в 1С
				НоваяЗаписьВРегистр = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				НоваяЗаписьВРегистр.Объект = Ссылка;
				НоваяЗаписьВРегистр.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "ИДоплатыПеренос");
				НоваяЗаписьВРегистр.Значение = XMLСтрока(СтруктОтвета.id);
				НоваяЗаписьВРегистр.Записать(Истина);
			///======================================================================================================================
			// Изменяем статусы оплаты 	
				Если НовыйПеренос Тогда
					ИзменитьСуммыИСтатусОплатВЦРМ(ТЗАвансов, ИмяСервера, КлючCRM, НомерЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Функция ПризнакОбработкиВзаимозачета(Взаимозачет)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Объект = &Объект";

	Запрос.УстановитьПараметр("Объект", Взаимозачет);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "ИДоплатыПеренос"));

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции

Функция ВернутьИдентификатор(Знач Взаимозачет,ДопРеквизит)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДополнительныеСведения.Значение
				   |ИЗ
				   |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				   |ГДЕ
				   |	ДополнительныеСведения.Объект = &Объект
				   |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Взаимозачет);
	Запрос.УстановитьПараметр("Свойство", ДопРеквизит);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Значение;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
// Вернуть ТЗАвансов документа.
// 
// Параметры:
//  Ссылка - ДокументСсылка.ВзаимозачетЗадолженности - Ссылка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Вернуть ТЗАвансов документа:
// * АйдиЗаказа - Строка - 
// * НомерЗаказа - Строка - 
// * Заказ - ДокументСсылка.ЗаказКлиента - 
Функция ВернутьТЗАвансовДокумента(Знач Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов.Объект КАК Объект,
				   |	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Сумма
				   |ИЗ
				   |	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ВзаимозачетЗадолженностиКредиторскаяЗадолженность
				   |ГДЕ
				   |	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка = &Ссылка
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Объект";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТЗЗаказовАванса = Новый ТаблицаЗначений;
	ТЗЗаказовАванса.Колонки.Добавить("АйдиЗаказа", Новый ОписаниеТипов("Строка"));
	ТЗЗаказовАванса.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка"));
	ТЗЗаказовАванса.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	ТЗЗаказовАванса.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Заказы = Новый ТаблицаЗначений;
	Заказы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	Заказы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Результат = Запрос.Выполнить();
	ВыборкаЗаписи = Результат.Выбрать();
	Пока ВыборкаЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаЗаписи.Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			НоваяСтрокаТЗ = Заказы.Добавить();
			НоваяСтрокаТЗ.Заказ =  ВыборкаЗаписи.Объект;
			НоваяСтрокаТЗ.Сумма =  ВыборкаЗаписи.Сумма;
		ИначеЕсли ТипЗнч(ВыборкаЗаписи.Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Или ТипЗнч(
			ВыборкаЗаписи.Объект) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Реализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаписи.Объект, "ДокументРеализации");
			НоваяСтрокаТЗ = Заказы.Добавить();
			НоваяСтрокаТЗ.Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реализация, "ЗаказКлиента");
			НоваяСтрокаТЗ.Сумма =  ВыборкаЗаписи.Сумма;
		КонецЕсли;
	КонецЦикла;
	Если Заказы.Количество() <> ВыборкаЗаписи.Количество() Тогда
		Возврат ТЗЗаказовАванса;
	КонецЕсли;
	СвойствоАйдиЗаказа = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "ИД");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Заказы.Заказ КАК Заказ,
				   |	Заказы.Сумма
				   |ПОМЕСТИТЬ Заказы
				   |ИЗ
				   |	&Заказы КАК Заказы
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Заказ
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Заказы.Заказ КАК Заказ,
				   |	ЗаказКлиента.НомерПоДаннымКлиента КАК НомерЗаказа,
				   |	Заказы.Сумма
				   |ПОМЕСТИТЬ ЗаказыСНомером
				   |ИЗ
				   |	Заказы КАК Заказы
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
				   |		ПО Заказы.Заказ = ЗаказКлиента.Ссылка
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Заказ
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ Заказы
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЗаказыСНомером.НомерЗаказа,
				   |	ДополнительныеСведения.Значение КАК АйдиЗаказа,
				   |	ЗаказыСНомером.Заказ,
				   |	ЗаказыСНомером.Сумма
				   |ИЗ
				   |	ЗаказыСНомером КАК ЗаказыСНомером
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				   |		ПО ЗаказыСНомером.Заказ = ДополнительныеСведения.Объект
				   |ГДЕ
				   |	ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Свойство", СвойствоАйдиЗаказа);
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		НоваяСтрТЗ = ТЗЗаказовАванса.Добавить();
		НоваяСтрТЗ.АйдиЗаказа = ВыборкаДетальныеЗаписи.АйдиЗаказа;
		НоваяСтрТЗ.НомерЗаказа = ВыборкаДетальныеЗаписи.НомерЗаказа;
		НоваяСтрТЗ.Заказ = ВыборкаДетальныеЗаписи.Заказ;
		НоваяСтрТЗ.Сумма = ВыборкаДетальныеЗаписи.Сумма;

	КонецЦикла;

	Возврат ТЗЗаказовАванса;

КонецФункции

// Изменить суммы и статус оплат ВЦРМ.
// 
// Параметры:
//  ТЗАвансов - ТаблицаЗначений
// * АйдиЗаказа - Строка - 
// * НомерЗаказа - Строка - 
// * Заказ - ДокументСсылка.ЗаказКлиента - 
//  ИмяСервера - Строка -
//  КлючCRM - Строка -
Процедура ИзменитьСуммыИСтатусОплатВЦРМ(ТЗАвансов, ИмяСервера, КлючCRM, НомерЗаказа)
	Для Каждого Стр Из ТЗАвансов Цикл
		// ======================================================================================================================
		// Получаем запросом каждый заказ в сторонней системе, из которого мы перенесли аванс в новый заказ
		АдресСкрипта = "/api/v5/orders?" + "filter[ids][]=" + XMLСтрока(Стр.АйдиЗаказа) + "&apiKey=" + КлючCRM;
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера, АдресСкрипта);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		СоответствиеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		СуммаПереноса = Стр.Сумма;
		Если СоответствиеОтвета.Получить("success") <> Неопределено Тогда
			Оплаты = СоответствиеОтвета["orders"][0]["payments"];
			//======================================================================================================================
			// Обходим каждую оплату из сторонней системы и уменьшаем её со сменой статуса
			Для Каждого СтрОплаты Из Оплаты Цикл
				СтрОплаты = СтрОплаты.Значение;
				Если СуммаПереноса = 0 Тогда
					Прервать;
				КонецЕсли;
				СтатусОплаты = СтрОплаты.Получить("status");
				СуммаОплаты = СтрОплаты.Получить("amount");
				КомментарийОплаты = ?(СтрОплаты.Получить("comment") = Неопределено, "", СтрОплаты.Получить("comment"));
				АйдиОплаты = СтрОплаты.Получить("id");
				Если СтатусОплаты = Неопределено Или СуммаОплаты = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если СтатусОплаты = "paid" Или СтатусОплаты = "perenos" Тогда
					
					Если СуммаОплаты >= СуммаПереноса Тогда
						СуммаРазницыДляИзменения = СуммаОплаты - СуммаПереноса;
						СуммаОставшегосяПереноса = 0;
					Иначе
						СуммаРазницыДляИзменения = СуммаОплаты;
						СуммаОставшегосяПереноса = СуммаПереноса - СуммаОплаты;
					КонецЕсли;
					
					Если ПустаяСтрока(КомментарийОплаты) Тогда
						КомментарийОплаты = "Перенос в заказ " + НомерЗаказа + "- " + XMLСтрока(?(
							СуммаРазницыДляИзменения = 0, СуммаОплаты, СуммаПереноса)) + " руб.";
					Иначе
						КомментарийОплаты = КомментарийОплаты + Символы.ПС + "Перенос в заказ " + НомерЗаказа + "- "
							+ XMLСтрока(?(СуммаРазницыДляИзменения = 0, СуммаОплаты, СуммаПереноса)) + " руб.";
					КонецЕсли;
					
					Платеж = Новый Соответствие;
					Платеж.Вставить("amount", Формат(СуммаРазницыДляИзменения, "ЧРД=.; ЧГ=0"));
					//======================================================================================================================
					// - Уменьшаем оплату вплоть до 0, со сменой статуса на perenos или если =0 на НЕ оплачен
					// - Статус perenos нужен, чтобы в изменённой библиотеке загрузки платежей пропускать обработку данных оплат
					// - и не менять первичные оплаты в 1С ( в 1С несколько объектов для отражения движения д/c, в сторонней
					// - один объект на всё
					Если СуммаРазницыДляИзменения = 0 Тогда
						Платеж.Вставить("status", "not-paid");
						Платеж.Вставить("amount", "0.00");
					Иначе
						Платеж.Вставить("status", "perenos");
						Платеж.Вставить("amount", Формат(СуммаРазницыДляИзменения, "ЧРД=.; ЧГ=0"));
					КонецЕсли;
					
					Платеж.Вставить("comment", КомментарийОплаты);
					Перемен = Новый Соответствие;
					перемен.Вставить("payment", crm_RetailCRMОбщий.JsonTest(Платеж, Новый ЗаписьJSON));
					перемен.Вставить("apiKey", КлючCRM);
					
					Ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/" + XMLСтрока(
					АйдиОплаты) + "/edit", перемен);
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(Ответ);
					СоответствиеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
					ЧтениеJSON.Закрыть();
					Если СоответствиеОтвета.Получить("success") <> Неопределено Тогда
						СуммаПереноса = СуммаОставшегосяПереноса;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#КонецЕсли