////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ Загрузка документа взаимозачета, перенос ДС осуществлён во внешней системе из заказа
// в заказ, вызов метода происходит при обработке платёжной информации из внешней системы
// 
//						Если Оплата["ТипОплаты"] = "perenos-ds" И ТипЗнч(ДокументОплаты) = Тип(
//						"ДокументСсылка.ЗаказКлиента") Тогда
//						УТ11_СоздатьДокументВзаимозачета(док.ссылка, Оплата, АйдиКорневого);
//
// 
//
//
//////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

Процедура УТ11_СоздатьДокументВзаимозачета(Знач Заказ, Оплата, АйдиКорневого)

		//======================================================================================================================
		//Получаем корневой заказ
	Корневой = УТ11_ВернутьДокументЗаказ(АйдиКорневого);
		//======================================================================================================================
		//Одним методом получаем необходимые реквизиты для создания документа
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ,"Валюта,ОбъектРасчетов,Контрагент,Партнер,Организация");
	СуммаАванса = Оплата["СуммаПлатежа"];
		//======================================================================================================================
		//Заполняем реквизиты документа
	ВзаимоЗачетЗадолженности = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
	ВзаимоЗачетЗадолженности.Валюта = РеквизитыЗаказа.Валюта;
	ВзаимоЗачетЗадолженности.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент;
	ВзаимоЗачетЗадолженности.Дата = ТекущаяДатаСеанса();
	ВзаимоЗачетЗадолженности.ДокументОснование = Заказ;
	ВзаимоЗачетЗадолженности.Комментарий = Оплата["Комментарий"];
	ВзаимоЗачетЗадолженности.КонтрагентДебитор = РеквизитыЗаказа.Контрагент;
	ВзаимоЗачетЗадолженности.КонтрагентКредитор = РеквизитыЗаказа.Контрагент;
	ВзаимоЗачетЗадолженности.Организация = РеквизитыЗаказа.Организация;
	ВзаимоЗачетЗадолженности.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
	ВзаимоЗачетЗадолженности.ТипКредитора= Перечисления.ТипыУчастниковВзаимозачета.Клиент;
	ВзаимоЗачетЗадолженности.СуммаДокумента = СуммаАванса;
	ВзаимоЗачетЗадолженности.СуммаРегл = СуммаАванса;
	ВзаимоЗачетЗадолженности.СуммаУпр = СуммаАванса;
		//======================================================================================================================
		//Заполняем строку ТЧ дебиторки, это новый заказ - разделённый из корневого
	СтрокаДебиторскойЗадолженности = ВзаимоЗачетЗадолженности.ДебиторскаяЗадолженность.Добавить();
	СтрокаДебиторскойЗадолженности.ВалютаВзаиморасчетов = РеквизитыЗаказа.Валюта;
	СтрокаДебиторскойЗадолженности.ОбъектРасчетов = РеквизитыЗаказа.ОбъектРасчетов;
	СтрокаДебиторскойЗадолженности.Организация = ВзаимоЗачетЗадолженности.Организация;
	СтрокаДебиторскойЗадолженности.Партнер= РеквизитыЗаказа.Партнер;
	СтрокаДебиторскойЗадолженности.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = СуммаАванса;
	СтрокаДебиторскойЗадолженности.СуммаРегл = СуммаАванса;
	СтрокаДебиторскойЗадолженности.СуммаУпр = СуммаАванса;
	
       //======================================================================================================================
		//Заполняем кредиторку данными из корневого заказа
	СтрокаКредиторскойЗадолженности = ВзаимоЗачетЗадолженности.КредиторскаяЗадолженность.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаКредиторскойЗадолженности, СтрокаДебиторскойЗадолженности);
	СтрокаКредиторскойЗадолженности.ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корневой,
		"ОбъектРасчетов");
	СтрокаКредиторскойЗадолженности.Сумма = СуммаАванса;
	СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов= СуммаАванса;
	СтрокаКредиторскойЗадолженности.СуммаРегл = СуммаАванса;
	СтрокаКредиторскойЗадолженности.СуммаУпр = СуммаАванса;
	
	Попытка
		
		ВзаимоЗачетЗадолженности.Записать(РежимЗаписиДокумента.Проведение);
		///======================================================================================================================
		// При проведении записываем идентификатор платежа из внешней системы
		ЗаписьРегистра = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект 	= ВзаимоЗачетЗадолженности.Ссылка;
		ЗаписьРегистра.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "ИДоплатыПеренос");
		ЗаписьРегистра.Значение = Оплата["ИДОплаты"];
		ЗаписьРегистра.Записать(Истина);
		
	Исключение
		ВзаимоЗачетЗадолженности.Комментарий = ВзаимоЗачетЗадолженности.Комментарий + Символы.ПС + ОписаниеОшибки();
		ВзаимоЗачетЗадолженности.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
