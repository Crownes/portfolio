////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ПересортицаТоваровСоСвязаннымОстатком:
//
// - Окружение УТ 11.5
// - Мастером даннных для номенклатуры является сайт
// - 2 карточки SKU могут являться одним и тем же товаром физически
// - Выбор карточки SKU зависит от выбора способа эксплуатации товара клиентом
// - Задача: при возникновении потребности по таким товарам, создавать пересортицу
// - Создан доп реквизит БСП для SKU cо значением идентификатора связанного SKU
// - API_ID реквизит-идентификатор SKU во внешней системе
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции
Процедура ПересортицаТоваровСоСвязаннымОстатком() Экспорт 
	//======================================================================================================================
	// Находим характеристики у которых в тч доп реквизитов есть свойство связанного остатка
	// Вторым запросом получаем количество свободного остатка в разрезе складов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение,
				   |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ХарактеристикиСоСвязаннымОстатком
				   |ИЗ
				   |	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
				   |ГДЕ
				   |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = &Свойство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РаспределениеЗапасов.Свободно КАК Свободно,
				   |	ХарактеристикиСоСвязаннымОстатком.Значение КАК API_ID,
				   |	РаспределениеЗапасов.Склад КАК Склад,
				   |	ХарактеристикиСоСвязаннымОстатком.Ссылка КАК Характеристика,
				   |	РаспределениеЗапасов.Номенклатура
				   |ИЗ
				   |	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
				   |		ПРАВОЕ СОЕДИНЕНИЕ ХарактеристикиСоСвязаннымОстатком КАК ХарактеристикиСоСвязаннымОстатком
				   |		ПО РаспределениеЗапасов.Характеристика = ХарактеристикиСоСвязаннымОстатком.Ссылка
				   |ГДЕ
				   |	РаспределениеЗапасов.Состояние = &Состояние
				   |	И РаспределениеЗапасов.Назначение = &Назначение
				   |	И РаспределениеЗапасов.Свободно > 0";

	Запрос.УстановитьПараметр("Состояние", Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	Запрос.УстановитьПараметр("Назначение", Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Свойство", СвойствоСовместныйОстаток());
	РзльтОстатки = Запрос.Выполнить().Выгрузить(); 
	
	//======================================================================================================================
	//Ищем есть ли потребность в заказах клиентов связанных товаров

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РаспределениеЗапасов.НеОбеспечено КАК ТребуемоеКоличество,
				   |	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
				   |	РаспределениеЗапасов.Характеристика КАК Характеристика,
				   |	РаспределениеЗапасов.Склад КАК Склад,
				   |	РаспределениеЗапасов.Характеристика.API_id КАК API_ID,
				   |	РаспределениеЗапасов.ЗаказНаОтгрузку.Назначение КАК Назначение
				   |ИЗ
				   |	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
				   |ГДЕ
				   |	РаспределениеЗапасов.ЗаказНаОтгрузку ССЫЛКА Документ.ЗаказКлиента
				   |	И РаспределениеЗапасов.Состояние = &Состояние
				   |	И РаспределениеЗапасов.Характеристика.API_id В (&СвязанныеТовары)";

	Запрос.УстановитьПараметр("Состояние", Перечисления.РаспределениеЗапасовСостояния.Обеспечить);
	Запрос.УстановитьПараметр("СвязанныеТовары", РзльтОстатки.ВыгрузитьКолонку("API_ID"));
	ПотребностьВЗаказах = Запрос.Выполнить().Выбрать();

	Пока ПотребностьВЗаказах.Следующий() Цикл

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("API_ID", ПотребностьВЗаказах.API_ID);
		ПараметрыОтбора.Вставить("Склад", ПотребностьВЗаказах.Склад);
		МассНайденныхСтрок = РзльтОстатки.НайтиСтроки(ПараметрыОтбора);
		Если ЗначениеЗаполнено(МассНайденныхСтрок) Тогда
			СтрокаОстатков = МассНайденныхСтрок[0];
		Иначе
			Продолжить;
		КонецЕсли;
		//======================================================================================================================
		//Уменьшаем количество свободных остатков в ТЗ остатков
		Если СтрокаОстатков.Свободно >= ПотребностьВЗаказах.ТребуемоеКоличество Тогда
			КоличествоПересорта = ПотребностьВЗаказах.ТребуемоеКоличество;
			СтрокаОстатков.Свободно = СтрокаОстатков.Свободно - ПотребностьВЗаказах.ТребуемоеКоличество;
		ИначеЕсли СтрокаОстатков.Свободно = 0 Тогда
			Продолжить;
		Иначе
			КоличествоПересорта = СтрокаОстатков.Свободно;
			СтрокаОстатков.Свободно = 0;
		КонецЕсли;
		//======================================================================================================================
		//Создаём документ на отражение пересортицы и заполняем его
		Пересорт = Документы.ОрдерНаОтражениеПересортицыТоваров.СоздатьДокумент();
		Пересорт.Дата = ТекущаяДатаСеанса();
		Пересорт.Склад = СтрокаОстатков.Склад;
		Пересорт.Комментарий = "Автоматическая пересортица по товарам со связанным остатком ";
		СтрокаТоваровДок = Пересорт.Товары.Добавить();
		СтрокаТоваровДок.Номенклатура = СтрокаОстатков.Номенклатура;
		СтрокаТоваровДок.Характеристика = СтрокаОстатков.Характеристика;
		СтрокаТоваровДок.НоменклатураОприходование = ПотребностьВЗаказах.Номенклатура;
		СтрокаТоваровДок.ХарактеристикаОприходование =  ПотребностьВЗаказах.Характеристика;
		СтрокаТоваровДок.Количество = КоличествоПересорта;
		СтрокаТоваровДок.КоличествоОприходование =  КоличествоПересорта;
		СтрокаТоваровДОк.КоличествоУпаковок = КоличествоПересорта;
		СтрокаТоваровДок.НазначениеОприходование = ПотребностьВЗаказах.Назначение;
		//======================================================================================================================
		//	Если склад неадресный, то всё ок. Но с адресным начинааются трудности
		//	Я понимаю, что сама проверка это неявный запрос в цикле, а дальше идёт вообще явный запрос,
		//  но пока нет идей как это переиграть, если только эти документы записывать, складывать в массив
		//  и далее по табличной части товаров в этих документах - сделать запрос с группировкой по остаткам на ячейках
		//  но и в нём могут быть нюансы, что в разных заказах клиента на одном складе потребуется один и тот же SKU, 
		//	тогда в следующих группировках информация о реальном остатке будет искажена и словим блокировку при проведении
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОстатков.Склад, "ИспользоватьАдресноеХранение") Тогда
			СтрокаТоваровДок.Упаковка =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду( , , ,
				СтрокаТоваровДок.Номенклатура);
			СтрокаТоваровДок.УпаковкаОприходование = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду( , , ,
				СтрокаТоваровДок.НоменклатураОприходование);

			ЗапросГдеЯчейка = Новый Запрос;
			ЗапросГдеЯчейка.Текст = "ВЫБРАТЬ
									|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
									|	ТоварыВЯчейкахОстатки.ВНаличииОстаток
									|ИЗ
									|	РегистрНакопления.ТоварыВЯчейках.Остатки(, Номенклатура = &Номенклатура
									|	И Характеристика = &Характеристика
									|	И Ячейка.Владелец = &Владелец
									|	И Назначение = &Назначение) КАК ТоварыВЯчейкахОстатки
									|ГДЕ
									|	ТоварыВЯчейкахОстатки.ВНаличииОстаток > 0";
			ЗапросГдеЯчейка.УстановитьПараметр("Характеристика", СтрокаТоваровДок.Характеристика);
			ЗапросГдеЯчейка.УстановитьПараметр("Назначение", Справочники.Назначения.ПустаяСсылка());
			ЗапросГдеЯчейка.УстановитьПараметр("Номенклатура", СтрокаТоваровДок.Номенклатура);
			ЗапросГдеЯчейка.УстановитьПараметр("Владелец", СтрокаОстатков.Склад);
			Ячейка = ЗапросГдеЯчейка.Выполнить().Выгрузить();
			Если Не ЗначениеЗаполнено(Ячейка) Тогда
				Продолжить;
			КонецЕсли;

			Если КоличествоПересорта <= Ячейка[0].ВНаличииОстаток Тогда
				СтрокаТоваровДок.Ячейка = Ячейка[0].Ячейка;
			Иначе
				СтрокаТоваровДок.Ячейка = Ячейка[0].Ячейка;
				СтрокаТоваровДок.Количество = Ячейка[0].ВНаличииОстаток;
				СтрокаТоваровДок.КоличествоОприходование =  Ячейка[0].ВНаличииОстаток;
				СтрокаТоваровДОк.КоличествоУпаковок = Ячейка[0].ВНаличииОстаток;
				КоличествоПересорта = КоличествоПересорта - Ячейка[0].ВНаличииОстаток;
				Для Инд = 1 По Ячейка.Количество() - 1 Цикл
					Если КоличествоПересорта = 0 Тогда
						Прервать;
					ИначеЕсли КоличествоПересорта <= Ячейка[Инд].ВНаличииОстаток Тогда
						НоваяСтрДок = Пересорт.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрДок, СтрокаТоваровДок);
						НоваяСтрДок.Ячейка = Ячейка[Инд].Ячейка;
						НоваяСтрДок.Количество = КоличествоПересорта;
						НоваяСтрДок.КоличествоОприходование =  КоличествоПересорта;
						НоваяСтрДок.КоличествоУпаковок = КоличествоПересорта;
						Прервать;
					Иначе
						НоваяСтрДок = Пересорт.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрДок, СтрокаТоваровДок);
						НоваяСтрДок.Ячейка = Ячейка[Инд].Ячейка;
						НоваяСтрДок.Количество =  Ячейка[Инд].ВНаличииОстаток;
						НоваяСтрДок.КоличествоОприходование =  Ячейка[Инд].ВНаличииОстаток;
						НоваяСтрДок.КоличествоУпаковок = Ячейка[Инд].ВНаличииОстаток;
						КоличествоПересорта = КоличествоПересорта - Ячейка[Инд].ВНаличииОстаток
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Пересорт.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

КонецПроцедуры

Функция СвойствоСовместныйОстаток()
	///======================================================================================================================
	// использовалось значение пвх из бсп, для примера оставлю тут константу
//	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Совместный остаток");
	Возврат Константы.СвойствоСовместногоОстатка.Получить();
КонецФункции


#КонецОбласти
