// Кастомизация работы с отгрузками:
// - контекст выполнения - типовая АРМ по отгрузке - модуль формы
// - для дополнительных отборов по распоряжениям по способу отгрузки и по перевозчикам;
// - для дополнительного функционала;
// - для быстрого создания заданий на отбор для работников склада;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура РРЦЗаказПоставщику_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	//======================================================================================================================
	// Инициализация, форма всегда открывается со способом - самовывоз
	
	Элементы.РаспоряженияНаОтгрузку.ПодчиненныеЭлементы.РаспоряженияНаОтгрузкуПеревозчикПартнер.Видимость = Ложь;
	СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
КонецПроцедуры
&НаКлиенте
Процедура РРЦЗаказПоставщику_СформироватьЗаданияНаОтборПеред(Команда)
	
	
	СписокСборщиков = РРЦЗаказПоставщику_ВернутьСписокСборщиков();
	
	Если СписокСборщиков.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр(
			"ru='В группе доступа работников склада нет ни одного пользователя'")));
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("РРЦЗаказПоставщику_ПослеВыбораСборщика", ЭтотОбъект);
	СписокСборщиков.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите сборщика для выделенных заданий");
	
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РРЦЗаказПоставщику_СпособДоставкиПриИзмененииВместо(Элемент)
	УстановитьОтборыВОсновныхСписках();
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры
&НаКлиенте
Процедура РРЦЗаказПоставщику_СпособДоставкиОбработкаВыбораПеред(Элемент, ВыбранноеЗначение, ДополнительныеДанные,
	ВыборДобавлением, СтандартнаяОбработка)
	Элементы.РаспоряженияНаОтгрузку.ПодчиненныеЭлементы.РаспоряженияНаОтгрузкуПеревозчикПартнер.Видимость = ?(
	РРЦЗаказПоставщику_ВернутьВидимостьКолонкиПеревозчик(ВыбранноеЗначение), Истина, Ложь);
КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции
&ИзменениеИКонтроль("ОрдераИзменитьСтатусСервер")
&НаСервере
Функция РРЦЗаказПоставщику_ОрдераИзменитьСтатусСервер(МассивДокументовДляОбработки, СтатусДокумента)

	МассивИзмененныхДокументов = Новый Массив;

	ЗаменитьЗаданияНаПеревозкуСсылкамиНаРасходныеОрдераВМассиве(МассивДокументовДляОбработки);

	МассивДокументов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивДокументовДляОбработки);

	Индекс = МассивДокументов.Количество();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТовары.Проведен КАК Проведен,
	|	РасходныйОрдерНаТовары.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА НастройкиАдресныхСкладов.ИспользоватьАдресноеХранение
	|				И РасходныйОрдерНаТовары.ДатаОтгрузки >= НастройкиАдресныхСкладов.ДатаНачалаАдресногоХраненияОстатков
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
	|		ПО (НастройкиАдресныхСкладов.Склад = РасходныйОрдерНаТовары.Склад)
	|			И (НастройкиАдресныхСкладов.Помещение = РасходныйОрдерНаТовары.Помещение)
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.Проведен,
	|	ОрдерНаПеремещениеТоваров.Статус,
	|	ВЫБОР
	|		КОГДА НастройкиАдресныхСкладов.ИспользоватьАдресноеХранение
	|				И ОрдерНаПеремещениеТоваров.ДатаОтгрузки >= НастройкиАдресныхСкладов.ДатаНачалаАдресногоХраненияОстатков
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
	|		ПО (НастройкиАдресныхСкладов.Склад = ОрдерНаПеремещениеТоваров.Склад)
	|			И (НастройкиАдресныхСкладов.Помещение = ОрдерНаПеремещениеТоваров.ПомещениеОтправитель)
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.Ссылка В(&МассивДокументов)";

	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);

	ТаблицаДанныхДокументов = Запрос.Выполнить().Выгрузить();

	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрМас = МассивДокументов[Индекс];

		РеквизитыДокумента = ТаблицаДанныхДокументов.Найти(СтрМас,"Ссылка");

		Если Не РеквизитыДокумента.Проведен Тогда
			ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен: групповой обработкой можно изменять статусы только для проведенных документов.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СтрМас);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МассивДокументов.Удалить(Индекс);
		ИначеЕсли СтатусДокумента = "Отгружен"
			И ТипЗнч(СтрМас) <> Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен: статус %Отгружен% может быть установлен только для расходных ордеров.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СтрМас);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отгружен%", Перечисления.СтатусыРасходныхОрдеров.Отгружен);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МассивДокументов.Удалить(Индекс);
		Иначе
			Если ТипЗнч(СтрМас) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента];
			Иначе
				СтатусЗначениеПеречисления = Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента];
			КонецЕсли;

			Если РеквизитыДокумента.Статус = СтатусЗначениеПеречисления Тогда

				ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен, т.к. документ уже находится в статусе %Статус%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СтрМас);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", СтатусЗначениеПеречисления);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				МассивДокументов.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	МассивДокументов = СкладыСервер.ПроверитьОрдераНаВозможностьИзмененияСтатуса(МассивДокументов);

	Если МассивДокументов.Количество() = 0 Тогда
		Возврат МассивИзмененныхДокументов;
	КонецЕсли;

	Индекс = МассивДокументов.Количество();

	Пока Индекс > 0 Цикл

		Индекс = Индекс - 1;
		ДокСсылка = МассивДокументов[Индекс];

		МожноИзменитьСтатусБезПерезаполнения = Ложь;

		РеквизитыДокумента = ТаблицаДанныхДокументов.Найти(ДокСсылка,"Ссылка");

		Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента];

			Если Не РеквизитыДокумента.ИспользоватьАдресноеХранение
				ИЛИ (РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке
						ИЛИ РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен
						ИЛИ РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
						ИЛИ РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен)
					И (СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров.Проверен
						ИЛИ СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
						ИЛИ СтатусЗначениеПеречисления= Перечисления.СтатусыРасходныхОрдеров.Отгружен)
				ИЛИ (РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено
					И СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров.КОтбору) Тогда

				МожноИзменитьСтатусБезПерезаполнения = Истина;
			КонецЕсли;
		Иначе
			СтатусЗначениеПеречисления = Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента];
			Если Не РеквизитыДокумента.ИспользоватьАдресноеХранение
				ИЛИ РеквизитыДокумента.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КПроверке
					И СтатусЗначениеПеречисления = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке Тогда

				МожноИзменитьСтатусБезПерезаполнения = Истина;
			КонецЕсли;
		КонецЕсли;

		Если МожноИзменитьСтатусБезПерезаполнения Тогда
			Попытка
				ДокументОбъект = ДокСсылка.ПолучитьОбъект(); // ДокументОбъект
				ДокументОбъект.Заблокировать();
			Исключение
				МассивДокументов.Удалить(Индекс);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;

			ДокументМенеджер = Документы[ДокументОбъект.Метаданные().Имя];
			ДокументОбъект.Статус = СтатусЗначениеПеречисления;
			#Вставка 
			Если	ДокументОбъект.ОтгрузкаПоЗаданиюНаПеревозку = Истина Тогда
				ДокументОбъект.ОтгрузкаПоЗаданиюНаПеревозку = Ложь;
				Распоряжения = ДокументОбъект.ТоварыПоРаспоряжениям.Выгрузить();
				Распоряжения.Свернуть("Распоряжение");
				ДокументОбъект.Комментарий = Строка(Распоряжения[0].Распоряжение.ПеревозчикПартнер);
			КонецЕсли;
			#КонецВставки

			Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
										НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,ДокументМенеджер).ОтгружаемыеТовары);
			Иначе
				ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
										НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,ДокументМенеджер));
			КонецЕсли;

			Если СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				// Для ордеров на перемещение дата меняется при установке статуса "Принят"
				ДокументОбъект.ДатаОтгрузки = ТекущаяДатаСеанса();
			ИначеЕсли СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров.КОтбору Тогда
				НоменклатураСервер.ЗаполнитьСерииПоFEFO(ДокументОбъект, ПараметрыУказанияСерий, Ложь);
			КонецЕсли;

			ДокументМенеджер.ЗаполнитьДействиеВСтроках(ДокументОбъект);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);

			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					МассивИзмененныхДокументов.Добавить(ДокСсылка);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			Иначе
				МассивСообщений = ПолучитьСообщенияПользователю(Истина);
				ТекстСообщения = НСтр("ru='Статус документа %ОрдерСсылка% не изменен, т.к. есть ошибки заполнения.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОрдерСсылка%",ДокументОбъект.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ДокументОбъект.Ссылка);
				Для Каждого Сообщение Из МассивСообщений Цикл
					Сообщение.Сообщить();
				КонецЦикла;
			КонецЕсли;
			МассивДокументов.Удалить(Индекс);

		КонецЕсли;

	КонецЦикла;

	Если МассивДокументов.Количество() = 0 Тогда
		УстановитьОтборыВОсновныхСписках();
		Возврат МассивИзмененныхДокументов;
	КонецЕсли;

	МассивПерезаполненныхДокументов = ЗаполнитьОрдераОтобраннымиТоварамиСервер(МассивДокументов, Истина, СтатусДокумента);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИзмененныхДокументов,МассивПерезаполненныхДокументов);

	УстановитьОтборыВОсновныхСписках();

	Возврат МассивИзмененныхДокументов;

КонецФункции
&ИзменениеИКонтроль("ЗаполнитьРаспоряженияНаОтгрузку")
&НаСервере
Процедура РРЦЗаказПоставщику_ЗаполнитьРаспоряженияНаОтгрузку(ПроверятьИзменениеПараметров)

	Если Не ЗначениеЗаполнено(Склад) Тогда
		РаспоряженияНаОтгрузку.Очистить();
		Возврат;
	КонецЕсли;

	Если Не Пользователи.ЭтоПолноправныйПользователь(Неопределено) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад";

		Запрос.УстановитьПараметр("Склад", Склад);

		Если Запрос.Выполнить().Пустой() Тогда
			РаспоряженияНаОтгрузку.Очистить();
			Возврат;
		КонецЕсли;

		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ТекущееЗаданиеНаПеревозкуОтгрузка);
	Запрос.УстановитьПараметр("ДатаОтгрузки", 		?(ЗначениеЗаполнено(ДатаОтгрузки), КонецДня(ДатаОтгрузки) + 1, ДатаОтгрузки));
	ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;
	Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);
	Запрос.УстановитьПараметр("ОтображениеДеталейОтгрузка", ОтображениеДеталейОтгрузка);

	Состояния = Новый Массив;
	Если СостояниеОтгрузки = "ВсеВРаботе" Тогда
		Состояния.Добавить(Перечисления.СостоянияОтбораТоваров.ВПроцессеОтбора);
		Состояния.Добавить(Перечисления.СостоянияОтбораТоваров.ОжидаетсяОтбор);
		Состояния.Добавить(Перечисления.СостоянияОтбораТоваров.ОжидаетсяОтгрузка);
	ИначеЕсли СостояниеОтгрузки = "" Тогда
		Для Каждого Значение Из Перечисления.СостоянияОтбораТоваров Цикл
			Состояния.Добавить(Значение);
		КонецЦикла;
	Иначе
		Состояния.Добавить(Перечисления.СостоянияОтбораТоваров[СостояниеОтгрузки]);
	КонецЕсли;
	Запрос.УстановитьПараметр("Состояния", Состояния);

	// Если параметры не изменились, то формировать список заново не надо
	Если ПроверятьИзменениеПараметров
	 И ТипЗнч(ПараметрыРаспоряженияНаОтгрузку) = Тип("ФиксированнаяСтруктура")
	 И ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ПараметрыРаспоряженияНаОтгрузку, Запрос.Параметры, "") Тогда
		Возврат;
	КонецЕсли;

	// Кэшируем текущие параметры
	ПараметрыРаспоряженияНаОтгрузку = Новый Структура("Склад, ЗаданиеНаПеревозку, ДатаОтгрузки");
	ЗаполнитьЗначенияСвойств(ПараметрыРаспоряженияНаОтгрузку, Запрос.Параметры);
	ПараметрыРаспоряженияНаОтгрузку.Вставить("ОтображениеДеталейОтгрузка", ОтображениеДеталейОтгрузка);
	ПараметрыРаспоряженияНаОтгрузку = Новый ФиксированнаяСтруктура(ПараметрыРаспоряженияНаОтгрузку);

	ТекстЗапроса = "";

	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();

	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОбороты.Номенклатура     КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика   КАК Характеристика,
		|	ТоварыКОтгрузкеОбороты.Назначение       КАК Назначение,
		|	ТоварыКОтгрузкеОбороты.Серия            КАК Серия,
		|	ТоварыКОтгрузкеОбороты.Склад            КАК Склад,
		|	ТоварыКОтгрузкеОбороты.КОтгрузкеПриход  КАК Количество
		|
		|ПОМЕСТИТЬ ТоварыКОтгрузкеОбороты
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			,
		|			&УсловиеСоединенияОбороты) КАК ТоварыКОтгрузкеОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	КонецЕсли;

	Если НЕ ОтображениеДеталейОтгрузка Тогда

		Если СкладыСервер.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Склад) Тогда

			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СостоянияИРеквизитыДоставки.Распоряжение КАК ДокументОтгрузки,
			|	СостоянияИРеквизитыДоставки.ПолучательОтправитель КАК Получатель
			|ПОМЕСТИТЬ ВТРаспоряженияСДоставкойПоЗаданиям
			|ИЗ
			|	РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ОтказОтПеревозки
			|		ПО (ОтказОтПеревозки.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка))
			|			И СостоянияИРеквизитыДоставки.Склад = ОтказОтПеревозки.Склад
			|			И (ОтказОтПеревозки.Распоряжение = СостоянияИРеквизитыДоставки.Распоряжение)
			|ГДЕ
			|	СостоянияИРеквизитыДоставки.Склад = &Склад
			|	И СостоянияИРеквизитыДоставки.СпособДоставки В(&СпособыДоставки)
			|	И ОтказОтПеревозки.Распоряжение ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.ДокументОтгрузки КАК ДокументОтгрузки,
			|	ВложенныйЗапрос.Получатель КАК Получатель,
			|	МИНИМУМ(ВложенныйЗапрос.Состояние) КАК Состояние
			|ПОМЕСТИТЬ ВТРаспоряженияКОтгрузке
			|ИЗ
			|	(ВЫБРАТЬ
			|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
			|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
			|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
			|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
			|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
			|		РаспоряженияКОтгрузке.Серия КАК Серия,
			|		ВЫБОР
			|			КОГДА &ОжидаетсяОтбор
			|				ТОГДА 0
			|			КОГДА РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
			|				ТОГДА 1
			|			КОГДА РаспоряженияКОтгрузке.СобраноОстаток <> 0
			|				ТОГДА 2
			|			КОГДА РаспоряженияКОтгрузке.КОформлениюОстаток <> 0
			|				ТОГДА 3
			|			ИНАЧЕ 404
			|		КОНЕЦ КАК Состояние
			|	ИЗ
			|		РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК РаспоряженияКОтгрузке
			|	ГДЕ &УсловиеТоварыКОтбору) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ДокументОтгрузки,
			|	ВложенныйЗапрос.Получатель
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументОтгрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК Ссылка,
			|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение,
			|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК ПолучательОтправитель
			|ПОМЕСТИТЬ ВТОтборЗаданияНаПеревозку
			|ИЗ
			|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
			|ГДЕ
			|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
			|	И ЗаданиеНаПеревозкуРаспоряжения.Склад = &Склад
			|	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Распоряжение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТИПЗНАЧЕНИЯ(ЗаданияНаПеревозку.Ссылка) КАК ТипДокумента,
			|	ЗаданияНаПеревозку.Ссылка КАК Распоряжение,
			|	ЗаданияНаПеревозку.Ссылка КАК ЗаданиеНаПеревозку,
			|	ЗаданияНаПеревозку.Ссылка.Номер КАК Номер,
			|	ЗаданияНаПеревозку.Ссылка.ДатаВремяРейсаПланС КАК Дата,
			|	НЕОПРЕДЕЛЕНО КАК Получатель,
			|	ВЫБОР
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 0
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 3
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
			|	КОНЕЦ КАК Состояние,
			|	1 КАК ИндексКартинки
			|ИЗ
			|	ВТОтборЗаданияНаПеревозку КАК ЗаданияНаПеревозку
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспоряженияКОтгрузке КАК ВТРаспоряженияКОтгрузке
			|		ПО (ВТРаспоряженияКОтгрузке.ДокументОтгрузки = ЗаданияНаПеревозку.Распоряжение)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаданияНаПеревозку.Ссылка,
			|	ЗаданияНаПеревозку.Ссылка.Номер,
			|	ЗаданияНаПеревозку.Ссылка.ДатаВремяРейсаПланС,
			|	ЗаданияНаПеревозку.Ссылка
			|
			|ИМЕЮЩИЕ
			|	ВЫБОР
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 0
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
			|		КОГДА МИНИМУМ(ВТРаспоряженияКОтгрузке.Состояние) = 3
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
			|	КОНЕЦ В (&Состояния)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТИПЗНАЧЕНИЯ(РаспоряженияКОтгрузке.ДокументОтгрузки)
			|,
			|	РаспоряженияКОтгрузке.ДокументОтгрузки,
			|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка),
			|	ЕСТЬNULL(РеестрДокументов.НомерДокументаИБ, """"),
			|	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)),
			|	РаспоряженияКОтгрузке.Получатель,
			|	ВЫБОР
			|		КОГДА РаспоряженияКОтгрузке.Состояние = 0
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
			|		КОГДА РаспоряженияКОтгрузке.Состояние = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
			|		КОГДА РаспоряженияКОтгрузке.Состояние = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
			|		КОГДА РаспоряженияКОтгрузке.Состояние = 3
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
			|	КОНЕЦ,
			|	0
			|ИЗ
			|	ВТРаспоряженияКОтгрузке КАК РаспоряженияКОтгрузке
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
			|		ПО РаспоряженияКОтгрузке.ДокументОтгрузки = РеестрДокументов.Ссылка
			|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспоряженияСДоставкойПоЗаданиям КАК ВТРаспоряженияСДоставкойПоЗаданиям
			|		ПО РаспоряженияКОтгрузке.ДокументОтгрузки = ВТРаспоряженияСДоставкойПоЗаданиям.ДокументОтгрузки
			|ГДЕ
			|	ВТРаспоряженияСДоставкойПоЗаданиям.ДокументОтгрузки ЕСТЬ NULL
			|	И ВЫБОР
			|			КОГДА РаспоряженияКОтгрузке.Состояние = 0
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
			|			КОГДА РаспоряженияКОтгрузке.Состояние = 1
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
			|			КОГДА РаспоряженияКОтгрузке.Состояние = 2
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
			|			КОГДА РаспоряженияКОтгрузке.Состояние = 3
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
			|		КОНЕЦ В (&Состояния)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";

			СпособыДоставки = ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(
				ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));

			Запрос.УстановитьПараметр("СпособыДоставки", СпособыДоставки);

		Иначе
			#Удаление
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.ДокументОтгрузки КАК Распоряжение,
			|	ВложенныйЗапрос.Получатель КАК Получатель,
			|	ВЫБОР
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 0
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 3
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
			|	КОНЕЦ КАК Состояние
			|ПОМЕСТИТЬ РаспоряженияИСостояния
			|ИЗ
			|	(ВЫБРАТЬ
			|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
			|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
			|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
			|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
			|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
			|		РаспоряженияКОтгрузке.Серия КАК Серия,
			|		ВЫБОР
			|			КОГДА &ОжидаетсяОтбор
			|				ТОГДА 0
			|			КОГДА РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
			|				ТОГДА 1
			|			КОГДА РаспоряженияКОтгрузке.СобраноОстаток <> 0
			|				ТОГДА 2
			|			КОГДА РаспоряженияКОтгрузке.КОформлениюОстаток <> 0
			|				ТОГДА 3
			|			ИНАЧЕ 404
			|		КОНЕЦ КАК Состояние
			|	ИЗ
			|		РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК РаспоряженияКОтгрузке
			|	ГДЕ &УсловиеТоварыКОтбору) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ДокументОтгрузки,
			|	ВложенныйЗапрос.Получатель
			|
			|ИМЕЮЩИЕ
			|	ВЫБОР
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 0
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 1
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 2
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
			|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 3
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
			|	КОНЕЦ В (&Состояния)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РаспоряженияИСостояния.Распоряжение КАК Распоряжение,
			|	РаспоряженияИСостояния.Получатель КАК Получатель,
			|	ЕСТЬNULL(РеестрДокументов.НомерДокументаИБ, """") КАК Номер,
			|	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
			|	ТИПЗНАЧЕНИЯ(РаспоряженияИСостояния.Распоряжение)
			| 	КАК ТипДокумента,
			|	РаспоряженияИСостояния.Состояние,
			|	0 КАК ИндексКартинки
			|ИЗ
			|	РаспоряженияИСостояния КАК РаспоряженияИСостояния
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
			|		ПО РаспоряженияИСостояния.Распоряжение = РеестрДокументов.Ссылка
			|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
			|
			|УПОРЯДОЧИТЬ ПО
			|	РеестрДокументов.ДатаДокументаИБ";
			#КонецУдаления
			#Вставка
			ТекстЗапроса	= ТекстЗапроса + "ВЫБРАТЬ РАЗЛИЧНЫЕ
							 |	ВложенныйЗапрос.ДокументОтгрузки КАК Распоряжение,
							 |	ВложенныйЗапрос.Получатель КАК Получатель,
							 |	ВЫБОР
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 0
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 1
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 2
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 3
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
							 |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
							 |	КОНЕЦ КАК Состояние
							 |ПОМЕСТИТЬ РаспоряженияИСостояния
							 |ИЗ
							 |	(ВЫБРАТЬ
							 |		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
							 |		РаспоряженияКОтгрузке.Получатель КАК Получатель,
							 |		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
							 |		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
							 |		РаспоряженияКОтгрузке.Назначение КАК Назначение,
							 |		РаспоряженияКОтгрузке.Серия КАК Серия,
							 |		ВЫБОР
							 |			КОГДА &ОжидаетсяОтбор
							 |				ТОГДА 0
							 |			КОГДА РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
							 |				ТОГДА 1
							 |			КОГДА РаспоряженияКОтгрузке.СобраноОстаток <> 0
							 |				ТОГДА 2
							 |			КОГДА РаспоряженияКОтгрузке.КОформлениюОстаток <> 0
							 |				ТОГДА 3
							 |			ИНАЧЕ 404
							 |		КОНЕЦ КАК Состояние
							 |	ИЗ
							 |		РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад
							 |		И ДокументОтгрузки.СпособДоставки = &СпособДоставки) КАК РаспоряженияКОтгрузке
							 |	ГДЕ &УсловиеТоварыКОтбору) КАК ВложенныйЗапрос
							 |СГРУППИРОВАТЬ ПО
							 |	ВложенныйЗапрос.ДокументОтгрузки,
							 |	ВложенныйЗапрос.Получатель
							 |ИМЕЮЩИЕ
							 |	ВЫБОР
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 0
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 1
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 2
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
							 |		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 3
							 |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
							 |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
							 |	КОНЕЦ В (&Состояния)
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	РаспоряженияИСостояния.Распоряжение КАК Распоряжение,
							 |	ЕСТЬNULL(РеестрДокументов.НомерПервичногоДокумента, """") КАК Номер,
							 |	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
							 |	ТИПЗНАЧЕНИЯ(РаспоряженияИСостояния.Распоряжение) КАК ТипДокумента,
							 |	РаспоряженияИСостояния.Состояние,
							 |	0 КАК ИндексКартинки,
							 |	РаспоряженияИСостояния.Получатель,
							 |	РаспоряженияИСостояния.Распоряжение.ПеревозчикПартнер КАК ПеревозчикПартнер
							 |ИЗ
							 |	РаспоряженияИСостояния КАК РаспоряженияИСостояния
							 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
							 |		ПО РаспоряженияИСостояния.Распоряжение = РеестрДокументов.Ссылка
							 |		И (НЕ РеестрДокументов.ДополнительнаяЗапись)
							 |
							 |УПОРЯДОЧИТЬ ПО
							 |	РеестрДокументов.ДатаДокументаИБ";
			#КонецВставки
		КонецЕсли;

	Иначе // ОтображениеДеталейОтгрузка

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументОтгрузки КАК Распоряжение,
		|	ВложенныйЗапрос.Получатель КАК Получатель,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 2
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 3
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
		|	КОНЕЦ КАК Состояние
		|ПОМЕСТИТЬ РаспоряженияИСостояния
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
		|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
		|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
		|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
		|		РаспоряженияКОтгрузке.Серия КАК Серия,
		|		ВЫБОР
		|			КОГДА &ОжидаетсяОтбор
		|				ТОГДА 0
		|			КОГДА РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
		|				ТОГДА 1
		|			КОГДА РаспоряженияКОтгрузке.СобраноОстаток <> 0
		|				ТОГДА 2
		|			КОГДА РаспоряженияКОтгрузке.КОформлениюОстаток <> 0
		|				ТОГДА 3
		|			ИНАЧЕ 404
		|		КОНЕЦ КАК Состояние
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|				&ДатаОтгрузки,
		|				Склад = &Склад
		|					И ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК ДокументОтгрузки
		|						ИЗ
		|							Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|						ГДЕ
		|							ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку)) КАК РаспоряженияКОтгрузке
		|	ГДЕ &УсловиеТоварыКОтбору) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОтгрузки,
		|	ВложенныйЗапрос.Получатель
		|
		|ИМЕЮЩИЕ
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтбор)
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ВПроцессеОтбора)
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 2
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОтгрузка)
		|		КОГДА МИНИМУМ(ВложенныйЗапрос.Состояние) = 3
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ОжидаетсяОформлениеНакладных)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка)
		|	КОНЕЦ В (&Состояния)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(РаспоряженияИСостояния.Распоряжение)
		| 	КАК ТипДокумента,
		|	3 КАК ИндексКартинки,
		|	РаспоряженияИСостояния.Распоряжение,
		|	&ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	РаспоряженияИСостояния.Получатель,
		|	ЕСТЬNULL(РеестрДокументов.НомерДокументаИБ, """") КАК Номер,
		|	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
		|	РаспоряженияИСостояния.Состояние,
		|	1 КАК Порядок
		|ИЗ
		|	РаспоряженияИСостояния КАК РаспоряженияИСостояния
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО РаспоряженияИСостояния.Распоряжение = РеестрДокументов.Ссылка
		|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ЗаданиеНаПеревозку.Ссылка),
		|	2,
		|	ЗаданиеНаПеревозку.Ссылка,
		|	ЗаданиеНаПеревозку.Ссылка,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОтбораТоваров.ПустаяСсылка),
		|	0
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозку.Ссылка = &ЗаданиеНаПеревозку
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Дата";

	КонецЕсли;

	Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда

		ОжидаетсяОтбор =
		"		&ОформлятьСначалаНакладные
		|			И ВЫБОР
		|				КОГДА РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток >= 0
		|					ТОГДА РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток
		|				ИНАЧЕ -(РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток)
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РаспоряженияКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|					ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТоварыКОтгрузкеОбороты.Количество
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЛИ НЕ &ОформлятьСначалаНакладные
		|			И ВЫБОР
		|				КОГДА РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток >= 0
		|					ТОГДА РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток
		|				ИНАЧЕ -(РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток)
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РаспоряженияКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|					ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТоварыКОтгрузкеОбороты.Количество
		|				ИНАЧЕ 0
		|			КОНЕЦ";

		УсловиеТоварыКОтбору = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКОтгрузкеОбороты КАК ТоварыКОтгрузкеОбороты
		|		ПО РаспоряженияКОтгрузке.ДокументОтгрузки = ТоварыКОтгрузкеОбороты.ДокументОтгрузки
		|			И РаспоряженияКОтгрузке.Номенклатура = ТоварыКОтгрузкеОбороты.Номенклатура
		|			И РаспоряженияКОтгрузке.Характеристика = ТоварыКОтгрузкеОбороты.Характеристика
		|			И РаспоряженияКОтгрузке.Назначение = ТоварыКОтгрузкеОбороты.Назначение
		|			И РаспоряженияКОтгрузке.Серия = ТоварыКОтгрузкеОбороты.Серия
		|			И РаспоряженияКОтгрузке.Склад = ТоварыКОтгрузкеОбороты.Склад
		|ГДЕ
		|
		|	РаспоряженияКОтгрузке.КОформлениюОстаток >
		|		ВЫБОР
		|			КОГДА РаспоряженияКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|				ТОГДА &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТоварыКОтгрузкеОбороты.Количество
		|					ИНАЧЕ 0
		|		КОНЕЦ
		|
		|	ИЛИ РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
		|	ИЛИ РаспоряженияКОтгрузке.СобраноОстаток <> 0
		|	ИЛИ (&ОжидаетсяОтбор)";

		УсловиеТоварыКОтбору = СтрЗаменить(УсловиеТоварыКОтбору,"&ОжидаетсяОтбор", ОжидаетсяОтбор);

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ &УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОжидаетсяОтбор", ОжидаетсяОтбор);
		Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
		Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Иначе

		ОжидаетсяОтбор =
		"&ОформлятьСначалаНакладные
		|			И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|		ИЛИ НЕ &ОформлятьСначалаНакладные
		|			И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0";

		УсловиеТоварыКОтбору =
		"ГДЕ
		|	(РаспоряженияКОтгрузке.КОформлениюОстаток <> 0
		|			ИЛИ (&ОжидаетсяОтбор)
		|			ИЛИ РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
		|			ИЛИ РаспоряженияКОтгрузке.СобраноОстаток <> 0)";

		УсловиеТоварыКОтбору = СтрЗаменить(УсловиеТоварыКОтбору,"&ОжидаетсяОтбор", ОжидаетсяОтбор);

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ &УсловиеТоварыКОтбору", УсловиеТоварыКОтбору);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОжидаетсяОтбор", ОжидаетсяОтбор);

	КонецЕсли;

	Если ОтображениеДеталейОтгрузка Тогда
		УсловиеСоединенияОбороты = "Склад = &Склад
		|					И ДокументОтгрузки В
		|						(ВЫБРАТЬ
		|							ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК ДокументОтгрузки
		|						ИЗ
		|							Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|						ГДЕ
		|							ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку)";
	Иначе
		УсловиеСоединенияОбороты = "Склад = &Склад";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеСоединенияОбороты", УсловиеСоединенияОбороты);

	Запрос.Текст = ТекстЗапроса;

	// Запомним текущую строку таблицы распоряжений
	Если ЗначениеЗаполнено(Элементы.РаспоряженияНаОтгрузку.ТекущаяСтрока) Тогда
		ТекущаяСтрокаРаспоряженияНаОтгрузку =
			РаспоряженияНаОтгрузку.НайтиПоИдентификатору(Элементы.РаспоряженияНаОтгрузку.ТекущаяСтрока);
		Если ТекущаяСтрокаРаспоряженияНаОтгрузку <> Неопределено Тогда
			ТекущееРаспоряжение = ТекущаяСтрокаРаспоряженияНаОтгрузку.Распоряжение;
		КонецЕсли;
	Иначе
		ТекущееРаспоряжение = Неопределено;
	КонецЕсли;
	#Вставка 
СпособДоставки = ?(СпособДоставки = Перечисления.СпособыДоставки.ПустаяСсылка(), Перечисления.СпособыДоставки.Самовывоз,
		СпособДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
#КонецВставки

	РаспоряженияНаОтгрузку.Загрузить(Запрос.Выполнить().Выгрузить());

	// Восстановим текущую строку
	Если ЗначениеЗаполнено(ТекущееРаспоряжение) Тогда
		Строки = РаспоряженияНаОтгрузку.НайтиСтроки(Новый Структура("Распоряжение", ТекущееРаспоряжение));
		Если Строки.Количество() > 0 Тогда
			Элементы.РаспоряженияНаОтгрузку.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли РаспоряженияНаОтгрузку.Количество() > 0 Тогда
		Элементы.РаспоряженияНаОтгрузку.ТекущаяСтрока = РаспоряженияНаОтгрузку[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РРЦЗаказПоставщику_СформироватьНакладныеВместо(Команда)
	НакладныеЗаказовКлиентов = Новый Массив;
	ЗаказыКлиентаБезНакладных = Новый Массив;
	НакладныеЗаказовНаПеремещение = Новый Массив;
	ЗаказыНаПеремещениеБезНакладных = Новый Массив;
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОтгрузка Тогда
		МассивДокументов = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru='Не выделены расходные ордера'")));
		Возврат;
	КонецЕсли;
	РРЦЗаказПоставщику_НакладныеВместоНаСервере(НакладныеЗаказовКлиентов, ЗаказыКлиентаБезНакладных,
		НакладныеЗаказовНаПеремещение, ЗаказыНаПеремещениеБезНакладных, МассивДокументов);
	ФормаНакладнойЗаказа = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	ФормаНакладнойПеремещения = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента";
	Если НакладныеЗаказовКлиентов.Количество() > 0 Тогда
		РРЦЗаказПоставщику_ОткрытьФормыДокументов("Ключ", ФормаНакладнойЗаказа, НакладныеЗаказовКлиентов);
	КонецЕсли;
	Если ЗаказыКлиентаБезНакладных.Количество() > 0 Тогда
		РРЦЗаказПоставщику_ОткрытьФормыДокументов("Основание", ФормаНакладнойЗаказа, ЗаказыКлиентаБезНакладных);
	КонецЕсли;
	Если НакладныеЗаказовНаПеремещение.Количество() > 0 Тогда
		РРЦЗаказПоставщику_ОткрытьФормыДокументов("Ключ", ФормаНакладнойПеремещения, НакладныеЗаказовНаПеремещение);
	КонецЕсли;
	Если ЗаказыНаПеремещениеБезНакладных.Количество() > 0 Тогда
		РРЦЗаказПоставщику_ОткрытьФормыДокументов("Основание", ФормаНакладнойПеремещения,
			ЗаказыНаПеремещениеБезНакладных);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РРЦЗаказПоставщику_ОткрытьФормыДокументов (Ключ, ФормаДокумента, Документы)
	Для Каждого Стр Из Документы Цикл
		ПараметрыФормы = Новый Структура; 
		ПараметрыФормы.Вставить(Ключ, Стр);
		ОткрытьФорму(ФормаДокумента, ПараметрыФормы);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РРЦЗаказПоставщику_НакладныеВместоНаСервере(НакладныеЗаказовКлиентов, ЗаказыКлиентаБезНакладных,
	НакладныеЗаказовНаПеремещение, ЗаказыНаПеремещениеБезНакладных, МассивДокументов)
	УстановитьПривилегированныйРежим(Истина);
	Распоряжения = Новый Массив;
	Для Каждого Стр Из МассивДокументов Цикл
		РаспоряженияОрдера = Стр.ТоварыПоРаспоряжениям.Выгрузить();
		РаспоряженияОрдера.Свернуть("Распоряжение");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения,РаспоряженияОрдера.ВыгрузитьКолонку(0),Истина );
	КонецЦикла;
	ЗаказыКлиентов = Новый Массив;
	ЗаказыНаПеремещение = Новый Массив;
	Для Каждого Стр Из Распоряжения Цикл
		Если ТипЗнч(Стр) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ЗаказыКлиентов.Добавить(Стр);
		ИначеЕсли ТипЗнч(Стр) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			ЗаказыНаПеремещение.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	Если ЗаказыКлиентов.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ЗаказКлиента В (&ЗаказКлиента)
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА";
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказыКлиентов);
		Результат = Запрос.Выполнить().Выгрузить();
		НакладныеЗаказовКлиентов = Результат.ВыгрузитьКолонку("Ссылка");
		ЗаказыКлиентаБезНакладных = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ЗаказыКлиентов,
			Результат.ВыгрузитьКолонку("ЗаказКлиента"));
	КонецЕсли;

	Если ЗаказыНаПеремещение.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПеремещениеТоваров.ЗаказНаПеремещение,
		|	ПеремещениеТоваров.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.ЗаказНаПеремещение В (&ЗаказНаПеремещение)
		|	И ПеремещениеТоваров.Проведен = ИСТИНА";
		Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказыНаПеремещение);
		Результат = Запрос.Выполнить().Выгрузить();
		НакладныеЗаказовНаПеремещение = Результат.ВыгрузитьКолонку("Ссылка");
		ЗаказыНаПеремещениеБезНакладных = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ЗаказыКлиентов,
			Результат.ВыгрузитьКолонку("ЗаказНаПеремещение"));
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РРЦЗаказПоставщику_ВернутьВидимостьКолонкиПеревозчик(ВыбранноеЗначение)
	Если ВыбранноеЗначение = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РРЦЗаказПоставщику_ВернутьСписокСборщиков()
	///======================================================================================================================
	// Возвращаем список сборщиков из соответствующей группы доступа пользователей
	СписокСборщиков = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ГруппыДоступаПользователи.Пользователь
				   |ИЗ
				   |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
				   |ГДЕ
				   |	ГруппыДоступаПользователи.Ссылка.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", "Работник склада");
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		СписокСборщиков.Добавить(ВыборкаИзЗапроса.Пользователь);
	КонецЦикла;
	
	Возврат СписокСборщиков;
	
КонецФункции

&НаКлиенте
Процедура РРЦЗаказПоставщику_ПослеВыбораСборщика(Элемент, Параметры) Экспорт
	
	Если Элемент <> Неопределено Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОтгрузка Тогда
			МассивДокументов = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru='Не выделены расходные ордера'")));
			Возврат;
		КонецЕсли;
		
		Если МассивДокументов.Количество() = 0 Тогда
			Возврат;			
		Иначе
			
			ТабДокументы = Новый Массив;
			РРЦЗаказПоставщику_СоздатьОтборыТоваров(МассивДокументов, Элемент.Значение, ТабДокументы);
			///======================================================================================================================
			// Создали отборы товаров для склада и выводим их для печати
			Для Каждого Стр Из ТабДокументы Цикл
				Стр.Показать();
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РРЦЗаказПоставщику_СоздатьОтборыТоваров(МассивДокументов, Исполнитель, ТабДокументы)
	
	ЗаменитьЗаданияНаПеревозкуСсылкамиНаРасходныеОрдераВМассиве(МассивДокументов);
	МассивДокументов = ОбщегоНазначения.СкопироватьРекурсивно(МассивДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ОтборРазмещениеТоваров.Исполнитель,
				   |	ОтборРазмещениеТоваров.Распоряжение
				   |ИЗ
				   |	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
				   |ГДЕ
				   |	ОтборРазмещениеТоваров.Проведен = ИСТИНА
				   |	И ОтборРазмещениеТоваров.Распоряжение В (&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивОтборов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Распоряжение");
	
	Для Каждого Стр Из МассивОтборов Цикл	
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='По расходному ордеру %1 уже создан отбор товаров'"),
			Стр));
	КонецЦикла;
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивДокументов, МассивОтборов);
	МассивСозданныхОтборов = Новый Массив;
	
	Для Каждого Стр Из МассивДокументов Цикл
		
		Если Стр.Статус <> Перечисления.СтатусыРасходныхОрдеров.КОтбору Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
				"ru='Для создания задания на отбор расходный ордер %1 нужно перевести в статус К отбору'"), Стр));
			Продолжить;
		КонецЕсли;
		
		НовыйДокументОтбора = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
		НовыйДокументОтбора.Заполнить(Стр);
		НовыйДокументОтбора.Исполнитель = Исполнитель;
		НовыйДокументОтбора.Статус  = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
		Попытка
			НовыйДокументОтбора.Записать(РежимЗаписиДокумента.Проведение);
			МассивСозданныхОтборов.Добавить(НовыйДокументОтбора.Ссылка);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Если МассивСозданныхОтборов.Количество() > 0 Тогда
		
		ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
		КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("СкладскоеЗадание");
		ОбъектыПечати = Новый СписокЗначений;
		ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
		Документы.ОтборРазмещениеТоваров.Печать(МассивСозданныхОтборов, ПараметрыПечати, КоллекцияПечатныхФорм,
			ОбъектыПечати, ПараметрыВывода);
			
		Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
			Если Стр.ТабличныйДокумент <> Неопределено Тогда
				ТабДокументы.Добавить(Стр.ТабличныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
