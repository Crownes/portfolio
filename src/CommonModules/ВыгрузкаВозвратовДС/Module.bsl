////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ Общий модуль выгрузки возвратов ДС:
// - вызов экспортной процедуры происходит из проведения расходных платежных документов
// - пример такого кода
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ОбработчикиСобытий
&После("ОбработкаПроведения")
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ВыгрузкаВозвратовДС.ОбработкаВыгрузкиВозврата(ЭтотОбъект, Отказ);
КонецПроцедуры
#КонецОбласти
#КонецЕсли
// -
//
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Обработка выгрузки возврата.
// 
// Параметры:
//	Документ - ДокументОбъект - документ.
//	Отказ - Булево - Признак отказа от проведения.
//  ДопПараметры - Неопределено - Доп параметры
Процедура ОбработкаВыгрузкиВозврата(Документ, Отказ, ДопПараметры = Неопределено) Экспорт
	///======================================================================================================================
	// Проверки - документ проводится, в расшифровке только одна строки, хоз операция - возврат оплаты клиенту
	Если ПроведениеДокументов.СвойстваДокумента(Документ).РежимЗаписи <> РежимЗаписиДокумента.Проведение Или Отказ
		Или Документ.РасшифровкаПлатежа.Количество() <> 1 Или Документ.ХозяйственнаяОперация
		<> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Возврат;
	КонецЕсли;
	//======================================================================================================================
	// Доп проверка, что этот документ возврата ранее не выгружался
	Если УДокументаЕстьАйдиВозврата(Документ.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	// Основная процедура выгрузки возврата
	ВыгрузитьВозврат(Документ, Отказ, 
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.РасшифровкаПлатежа[0].ОбъектРасчетов, "Объект"), Документ.СуммаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьВозврат(Документ, Отказ, Знач ОснованиеПлатежа, Знач СуммаВозврата)
	Если ТипЗнч(ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		///======================================================================================================================
		// Инициализация переменных для выгрузки
		ИДЗаказа = ПолучитьИДЗаказа(ОснованиеПлатежа);
		КодМагазина = ВернутьКодМагазинаCRM(ОснованиеПлатежа);
		ИмяСервера= СокрЛП(crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИмяСервера"));
		КлючCRM		= СокрЛП(crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("КлючCRM"));
		УРЛЗапроса 	= "https://" + СокрЛП(crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИмяСервера"));
		
		// /======================================================================================================================
		// Компоновка и отправка запроса на получение заказа сторонней библиотекой КоннекторHTTP
		ПараметрыЗапроса = Новый Соответствие;
		ПараметрыЗапроса.Вставить("filter[ids][]", ИДЗаказа);
		ПараметрыЗапроса.Вставить("apiKey", КлючCRM);
		ЗаказВCRM = КоннекторHTTP.GetJson(УРЛЗапроса + "/api/v5/orders", ПараметрыЗапроса);
		
		// /======================================================================================================================
		// Получение текущих оплат в заказе, инициализация таблицы значений для измененных платежей
		Оплаты = ЗаказВCRM["orders"][0]["payments"];
		СуммаОставшегосяВозврата = СуммаВозврата;
		
		ИзмененныеПлатежи = Новый ТаблицаЗначений;
		ИзмененныеПлатежи.Колонки.Добавить("АйдиПлатежа", Новый ОписаниеТипов("Строка"));
		ИзмененныеПлатежи.Колонки.Добавить("Оплата", Новый ОписаниеТипов("Соответствие"));
		ИзмененныеПлатежи.Колонки.Добавить("СуммаВозврата", Новый ОписаниеТипов("Число"));
		ТипОплатыДляВозврата = "";
		/// ======================================================================================================================
		// Компоновка данных для уменьшения оплат в заказе по сумме возврата
		Для Каждого СтрОплаты Из Оплаты Цикл
			СтрОплаты = СтрОплаты.Значение;
			
			Если СуммаОставшегосяВозврата = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтатусОплаты = СтрОплаты["status"];
			СуммаОплаты = СтрОплаты["amount"];
			
			Если СтатусОплаты = "paid" Или СтатусОплаты = "perenos" Тогда
				Если СуммаОплаты > СуммаОставшегосяВозврата Тогда
					ИзмененнаяОплата = XMLСтрока(СуммаОплаты - СуммаОставшегосяВозврата);
					СуммаОставшегосяВозврата = 0;
				ИначеЕсли СуммаОплаты < СуммаОставшегосяВозврата Тогда
					ИзмененнаяОплата = "0";
					СуммаОставшегосяВозврата = СуммаОставшегосяВозврата - СуммаОплаты;
				ИначеЕсли СуммаОплаты = СуммаОставшегосяВозврата Тогда
					ИзмененнаяОплата = "0";
					СуммаОставшегосяВозврата = 0;
				КонецЕсли;
				
				Платеж = Новый Соответствие;
				Платеж.Вставить("amount", ИзмененнаяОплата);
				Если Число(ИзмененнаяОплата) = 0 Тогда
					Платеж.Вставить("status", "not-paid");
				Иначе
					///======================================================================================================================
					// Статус perenos для дальнейшего маркера, чтобы 1С при загрузке не изменила первичную оплату
					Платеж.Вставить("status", "perenos");
				КонецЕсли;
				
				Комментарий = ?(СтрОплаты["comment"] = Неопределено, "", СтрОплаты["comment"] + Символы.ПС);
				ИзменилиНа = XMLСТрока(СуммаОплаты - Число(ИзмененнаяОплата));
				
				Платеж.Вставить("comment", Комментарий + "Возврат - " + ИзменилиНа);
				Перемен = Новый Соответствие;
				перемен.Вставить("payment", crm_RetailCRMОбщий.JsonTest(Платеж, Новый ЗаписьJSON));
				перемен.Вставить("apiKey", КлючCRM);
				
				НовСТРТЗ = ИзмененныеПлатежи.Добавить();
				НовСТРТЗ.Оплата = перемен;
				НовСТРТЗ.АйдиПлатежа = XMLСтрока(СтрОплаты["id"]);
				НовСТРТЗ.СуммаВозврата = СуммаОплаты - Число(ИзмененнаяОплата);
				///======================================================================================================================
				// Возврат выгрузится с типом самой последней измененной оплаты
				ТипОплатыДляВозврата = СтрОплаты["type"];

			КонецЕсли;
			
		КонецЦикла;
		
	//======================================================================================================================
		// Вызов сторонней библиотеки для выгрузки скомпонованных данных - измененных платежей в заказе
		СуммаВозвращенного = 0;
		Для Каждого Стр Из ИзмененныеПлатежи Цикл
			
			Ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/" + Стр.АйдиПлатежа
				+ "/edit", Стр.Оплата);
			СоответствиеОтвета = ВернутьКоллекциюОтвета(Ответ);
			Если СоответствиеОтвета.Получить("success") <> Неопределено Тогда
				СуммаВозвращенного =СуммаВозвращенного + Стр.СуммаВозврата;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	///======================================================================================================================
		// Компоновка данных для выгрузки возврата
		Платеж = Новый Соответствие;
		Платеж.Вставить("amount", XMLСтрока(СуммаВозвращенного));
		Платеж.Вставить("status", "returned");
		
		ЗаказВПлатеже = Новый Соответствие;
		ЗаказВПлатеже.Вставить("id", ИДЗаказа);
		
		Платеж.Вставить("order", ЗаказВПлатеже);
		Платеж.Вставить("comment", "Возврат оплаты из 1С");
		Платеж.Вставить("type",ТипОплатыДляВозврата );
		Платеж.Вставить("paidAt",crm_RetailCRMОбщий.ДатаВремяДляCRM(ТекущаяДатаСеанса()));
		
		Перемен = Новый Соответствие;
		перемен.Вставить("payment", crm_RetailCRMОбщий.JsonTest(Платеж, Новый ЗаписьJSON));
		перемен.Вставить("apiKey", КлючCRM);
		перемен.Вставить("site", КодМагазина);
		
		Ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/create", перемен);
		СоответствиеОтвета = ВернутьКоллекциюОтвета(Ответ);
		
		Если СоответствиеОтвета.Получить("id") <> Неопределено Тогда
			ПроставитьАйдиДокументуВозврата(СоответствиеОтвета["id"],Документ.Ссылка);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Функция ВернутьКоллекциюОтвета(Знач Ответ)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	СоответствиеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	Возврат СоответствиеОтвета
КонецФункции
Функция ПолучитьИДЗаказа(Знач Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДополнительныеСведения.Значение
				   |ИЗ
				   |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				   |ГДЕ
				   |	ДополнительныеСведения.Объект = &Объект
				   |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Заказ);
	Запрос.УстановитьПараметр("Свойство", ПолучитьСвойствоИДЗаказа());
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Значение;
	КонецЕсли;
КонецФункции

Функция ПолучитьСвойствоИДЗаказа()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДополнительныеРеквизитыИСведения.Ссылка
				   |ИЗ
				   |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
				   |ГДЕ
				   |	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
				   |	И ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок";

	Запрос.УстановитьПараметр("Заголовок", "ИД");
	Запрос.УстановитьПараметр("НаборСвойств",
		Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	КонецЕсли;

КонецФункции
Функция ВернутьКодМагазинаCRM(Знач Заказ)
	CвойствоКодМагазина = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
		"ИдентификаторДляФормул", "Site");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДополнительныеСведения.Значение
				   |ИЗ
				   |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				   |ГДЕ
				   |	ДополнительныеСведения.Объект = &Объект
				   |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Заказ);
	Запрос.УстановитьПараметр("Свойство", CвойствоКодМагазина);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Значение;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
Процедура ПроставитьАйдиДокументуВозврата (Айди,Документ)
	СвойствоДокумента = ПолучитьСвойствоДокументаВозврата();
	НоваяЗаписьВРегистр = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	НоваяЗаписьВРегистр.Объект = Документ;
	НоваяЗаписьВРегистр.Свойство = СвойствоДокумента;
	НоваяЗаписьВРегистр.Значение = Айди;
	НоваяЗаписьВРегистр.Записать(Истина);
КонецПроцедуры
Функция ПолучитьСвойствоДокументаВозврата()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок";

	Запрос.УстановитьПараметр("Заголовок", "ИДВозврата");
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	КонецЕсли;
КонецФункции

Функция УДокументаЕстьАйдиВозврата(Знач Документ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект",Документ);
	Запрос.УстановитьПараметр("Свойство",ПолучитьСвойствоДокументаВозврата());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
#КонецОбласти